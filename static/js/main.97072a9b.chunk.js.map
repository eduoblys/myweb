{"version":3,"sources":["components/SideDrawer/DrawerToogleButton.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","className","onClick","click","toolbar","drawerClickHandler","to","sideDrawer","drawerClasses","show","backdrop","Home","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","this","Backdrop","style","height","Toolbar","SideDrawer","exact","path","component","About","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAUeA,EARY,SAAAC,GAAK,OAC5B,4BAAQC,UAAU,gBAAgBC,QAASF,EAAMG,OAC7C,yBAAKF,UAAU,wBACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,0BCgBRG,EAlBC,SAAAJ,GAAK,OACjB,4BAAQC,UAAU,WACd,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,0BACX,kBAAC,EAAD,CAAoBE,MAAOH,EAAMK,sBAErC,yBAAKJ,UAAU,iBAAgB,kBAAC,IAAD,CAAMK,GAAG,KAAT,SAC/B,yBAAKL,UAAU,WACf,yBAAKA,UAAU,4BACX,4BACI,4BAAI,kBAAC,IAAD,CAAMK,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,cCMTC,EAjBI,SAAAP,GACf,IAAIQ,EAAgB,cAIpB,OAHIR,EAAMS,OACND,EAAgB,oBAGpB,yBAAKP,UAAWO,GACZ,4BACI,4BAAI,kBAAC,IAAD,CAAMF,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,YCPDI,EAJE,SAAAV,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,SCG9BQ,EAJF,SAAAX,GAAK,OACd,qCCGWW,EAJF,SAAAX,GAAK,OACd,uCC8CWY,G,iNApCbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,yBAA2B,WACzB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAIvCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,gBAAgB,K,wEAI/B,IAAIJ,EAKJ,OAHIS,KAAKN,MAAMC,iBACbJ,EAAW,kBAACU,EAAD,CAAUjB,MAAOgB,KAAKD,wBAGjC,kBAAC,IAAD,KACE,yBAAKG,MAAO,CAACC,OAAQ,SACnB,kBAACC,EAAD,CAASlB,mBAAoBc,KAAKJ,2BAClC,kBAACS,EAAD,CAAYf,KAAMU,KAAKN,MAAMC,iBAC5BJ,EACD,0BAAMT,UAAU,QAEd,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASC,UAAWC,W,GA9BhCC,IAAMC,YCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.97072a9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst drawerToggleButton = props => (\r\n    <button className=\"toggle-button\" onClick={props.click}>\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />   \r\n    </button>  \r\n);\r\n    \r\nexport default drawerToggleButton;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DrawerToggleButton from '../SideDrawer/DrawerToogleButton';\r\n\r\nconst toolbar = props => (\r\n    <header className=\"toolbar\">\r\n        <nav className=\"toolbar__navigation\">\r\n            <div className=\"toolbar__toggle-button\">\r\n                <DrawerToggleButton click={props.drawerClickHandler} />\r\n            </div>\r\n            <div className=\"toolbar__logo\"><Link to=\"/\" >LOGO</Link></div>\r\n            <div className=\"spacer\"></div>\r\n            <div className=\"toolbar_navigation-items\">\r\n                <ul>\r\n                    <li><Link to=\"/about\" >About</Link></li>\r\n                    <li><Link to=\"/\" >home</Link></li>                    \r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default toolbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst sideDrawer = props => {\r\n    let drawerClasses = 'side-drawer';\r\n    if (props.show) {\r\n        drawerClasses = 'side-drawer open';\r\n    }\r\n    return (\r\n    <nav className={drawerClasses}>\r\n        <ul>\r\n            <li><Link to=\"/about\" >About</Link></li>\r\n            <li><Link to=\"/\" >home</Link></li>\r\n            \r\n        </ul>\r\n    </nav>\r\n    );\r\n};\r\n\r\n\r\nexport default sideDrawer;","import React from 'react';\r\n\r\nconst backdrop = props => (\r\n    <div className=\"backdrop\" onClick={props.click} />\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nconst Home = props => (\r\n    <div>asd</div> \r\n);\r\n    \r\nexport default Home;","import React from 'react';\r\n\r\nconst Home = props => (\r\n    <div>About</div> \r\n);\r\n    \r\nexport default Home;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/Backdrop/Backdrop';\nimport Home from './components/Home';\nimport About from './components/About';\n\nimport \"./App.css\";\n\n\n\nclass App extends React.Component {\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen: false});\n  }\n\n  render() {\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler}/>\n    }\n    return (\n      <Router>\n        <div style={{height: \"100%\"}}>\n          <Toolbar drawerClickHandler={this.drawerToggleClickHandler}/>\n          <SideDrawer show={this.state.sideDrawerOpen} />\n          {backdrop}\n          <main className=\"main\">\n\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/about\" component={About} />\n          </main>    \n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}